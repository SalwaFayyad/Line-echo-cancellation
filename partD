%Salwa Fayyad 1200430 , Sondos Farrah 1200905 , Katya Kobari 1201478

close all;
clear all;
clc;

load('path.mat');
load('css.mat');

farEnd = repmat(css, 1, 10); % Repeat CSS data for 10 blocks
echo = filter(path, 1, farEnd);

filter_length = 128; % Number of filter taps
step_size = 1e-6; % NLMS step size
mu = 0.25; % Step size for NLMS algorithm
adapt_filter = zeros(filter_length, 1); % Initialize adaptive filter coefficients
delayedFarEnd = zeros(filter_length, 1);  

% Initialize error signal with the size of far end
error_signal = zeros(size(farEnd));
estimatedPath = zeros(size(farEnd));

for n = 1:length(farEnd)
    farEndSample = farEnd(n);
    echoSample = echo(n);
    
    y = adapt_filter' * delayedFarEnd; % Output of adaptive filter
    error = echoSample - y; % Error signal
    
    adapt_filter = adapt_filter + (mu / (norm(delayedFarEnd)^2 + step_size)) * conj(delayedFarEnd) * error; % Update filter weights
    
    error_signal(n) = error; % Store error signal
    estimatedPath(n) = adapt_filter' * delayedFarEnd; % Estimate of echo path
    
    % Shift the delayedFarEndSignal by 1 sample
    delayedFarEnd = [farEndSample; delayedFarEnd(1:end-1)];
end

% Plotting the signals and estimated echo path
figure;
subplot(5, 1, 1);
plot(farEnd,'g');
title('Far-End Signal');
subplot(5, 1, 2);
plot(echo);
title('Echo Signal');
subplot(5, 1, 3);
plot(error_signal,'r');
title('Error Signal');
subplot(5, 1, 4);
plot(estimatedEchoPath,'m');
title('Estimated Echo Path');
