                      APPENDIX
%  part A

%Salwa Fayyad 1200430 , Sondos Farrah 1200905 , Katya Kobari 1201478
load('path.mat');
subplot(2, 1, 1);
plot(path,'m','LineWidth',2);
xlabel('Time');
ylabel('Amplitude');
title('Impulse Response of Echo Path');
subplot(2, 1, 2);
[H, w] = freqz(path, 1, length(path));
magnitude_dB = 20 * log10(abs(H)); 
plot(w/pi*4000, magnitude_dB,'c','LineWidth',2);
xlabel('Frequency');
ylabel('Amplitude (dB)');
title('Frequency Response ');




% -----------------------------------------------B, C
%  part B and the plot part of part C


%Salwa Fayyad 1200430 , Sondos Farrah 1200905 , Katya Kobari 1201478
close all;
clear all;
clc;

fs = 8000;
load('path.mat');
% Load the data from css.mat file
load('css.mat'); % Assuming css.mat is in the current directory
subplot(2, 2, 1);
plot(css);
xlabel('Time');
ylabel('Amplitude');
title('Composite Source Siganl');
subplot(2, 2, 2);
[psd, freq] = pwelch(css, [], [], [], fs);
plot(freq, 10*log10(psd),'r');
title('Power Spectral Density ');
xlabel('Frequency (Hz)');
ylabel('Power (dB)');
%Far-end signal
subplot(2, 2, 3);
Xc= [css css css css css];
yy = linspace(0, (length(Xc)-1)*(1000/fs), length(Xc));
length(Xc)
length(yy)
plot(Xc,'g');
title('Far-end Signal');
xlabel('Time');
ylabel('Amplitude');
subplot(2, 2, 4);
y = conv(path,Xc);
plot(y,'m');
title('Echo Signal');
xlabel('Time');
ylabel('Amplitude');


%-----------------------------C
% calculating part of part C

%Salwa Fayyad 1200430 , Sondos Farrah 1200905 , Katya Kobari 1201478
close all;
clear all;
clc;
load('path.mat');
load('css.mat');
Xc = [css,css ,css ,css, css];
N= length(Xc);%5600*5
y = conv(path, Xc);
InputPower = 10 * log10((1/N) * sum(abs(Xc).^2))
OutputPower = 10 * log10((1/N) * sum(abs(y).^2))
ERL = OutputPower-InputPower


%-----------------------------D
%part D 
%Salwa Fayyad 1200430 , Sondos Farrah 1200905 , Katya Kobari 1201478

close all;
clear all;
clc;
load('path.mat');
load('css.mat');

farEnd = repmat(css, 1, 10); % Repeat CSS data for 10 blocks
echo = filter(path, 1, farEnd);

filter_length = 128; % Number of filter taps
step_size = 1e-6; % NLMS step size
mu = 0.25; % Step size for NLMS algorithm
adapt_filter = zeros(filter_length, 1); % Initialize adaptive filter coefficients
delayedFarEnd = zeros(filter_length, 1);  

% Initialize error signal with the size of far end
error_signal = zeros(size(farEnd));
estimatedPath = zeros(size(farEnd));

for n = 1:length(farEnd)
    farEndSample = farEnd(n);
    echoSample = echo(n);
    
    y = adapt_filter' * delayedFarEnd; % Output of adaptive filter
    error = echoSample - y; % Error signal
    
    adapt_filter = adapt_filter + (mu / (norm(delayedFarEnd)^2 + step_size)) * conj(delayedFarEnd) * error; % Update filter weights
    
    error_signal(n) = error; % Store error signal
    estimatedPath(n) = adapt_filter' * delayedFarEnd; % Estimate of echo path
    
    % Shift the delayedFarEndSignal by 1 sample
    delayedFarEnd = [farEndSample; delayedFarEnd(1:end-1)];
end
% Plotting the signals and estimated echo path
figure;
subplot(5, 1, 1);
plot(farEnd,'g');
title('Far-End Signal');
subplot(5, 1, 2);
plot(echo);
title('Echo Signal');
subplot(5, 1, 3);
plot(error_signal,'r');
title('Error Signal');
subplot(5, 1, 4);
plot(estimatedPath,'m');
title('Estimated Echo Path');


%-----------------------------E
%part E

%Salwa Fayyad 1200430 , Sondos Farrah 1200905 , Katya Kobari 1201478
close all;
clear all;
clc;
load('path.mat');
load('css.mat');

farEnd = repmat(css, 1, 10); % Repeat CSS data for 10 blocks
echoSignal = filter(path, 1, farEnd);

filter_length = 128; % Number of filter taps
step_size = 1e-6; % NLMS step size
mu = 0.25; % Step size for NLMS algorithm
adaptiveFilter = zeros(filter_length, 1); % Initialize adaptive filter coefficients
delayedFarEnd = zeros(filter_length, 1);  

% Initialize error signal with the size of farEnd
error_signal = zeros(size(farEnd));
estimatedEchoPath = zeros(size(farEnd));

for n = 1:length(farEnd)
    farEndSample = farEnd(n);
    echoSample = echoSignal(n);
    
    y = adaptiveFilter' * delayedFarEnd; % Output of adaptive filter
    error = echoSample - y; % Error signal
    
    adaptiveFilter = adaptiveFilter + (mu / (norm(delayedFarEnd)^2 + step_size)) * conj(delayedFarEnd) * error; % Update filter weights
    
    error_signal(n) = error; % Store error signal
    estimatedEchoPath(n) = adaptiveFilter' * delayedFarEnd; % Estimate of echo path
    
    % Shift the delayedFarEndSignal by 1 sample
    delayedFarEnd = [farEndSample; delayedFarEnd(1:end-1)];
end

% Compute the frequency response of the estimated FIR channel
[H_est, w_est] = freqz(adaptiveFilter, 1, length(adaptiveFilter));

% Compute the frequency response of the given FIR system (Path)
[H_path, w_path] = freqz(path, 1, length(path));

% Plot the amplitude response
figure;
subplot(2, 1, 1);
plot(w_est/pi, 20*log10(abs(H_est)),'r');
hold on;
plot(w_path/pi, 20*log10(abs(H_path)),'b');
hold off;
title('Amplitude Response');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Magnitude');
legend('Estimated FIR Channel', 'Given FIR System (Path)');

% Plot the phase response
subplot(2, 1, 2);
plot(w_est/pi, unwrap(angle(H_est)),'r');
hold on;
plot(w_path/pi, unwrap(angle(H_path)),'b');
hold off;
title('Phase Response');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Phase (rad)');
legend('Estimated FIR Channel', 'Given FIR System (Path)');


%--------------------------------F
%part F  
%Salwa Fayyad 1200430 , Sondos Farrah 1200905 , Katya Kobari 1201478
close all;
clear all;
clc;
load('path.mat');
load('css.mat');

farEnd = repmat(css, 1, 10); 
echoSignal = filter(path, 1, farEnd);

filter_length = 128; 
step_size = 1e-6; 
adaptiveFilter = zeros(filter_length, 1); 
delayedFarEnd = zeros(filter_length, 1);  

error_signal = zeros(size(farEnd));
estimatedEchoPath = zeros(size(farEnd));

for n = 1:length(farEnd)
    farEndSample = farEnd(n);
    echoSample = echoSignal(n);
    
    y = adaptiveFilter' * delayedFarEnd; 
    error = echoSample - y; % Error signal
    
    adaptiveFilter = adaptiveFilter + step_size * conj(delayedFarEnd) * error; % Update filter weights
    
    error_signal(n) = error; % Store error signal
    estimatedEchoPath(n) = adaptiveFilter' * delayedFarEnd; % Estimate of echo path
    
    delayedFarEnd = [farEndSample; delayedFarEnd(1:end-1)];
end

% Compute the frequency response of the estimated FIR channel
[H_est, w_est] = freqz(adaptiveFilter, 1, length(adaptiveFilter));

% Compute the frequency response of the given FIR system (Path)
[H_path, w_path] = freqz(path, 1, length(path));

% Plot the amplitude response
figure;
subplot(2, 1, 1);
plot(w_est/pi, 20*log10(abs(H_est)),'LineWidth',2,Color="#77AC30");
hold on;
plot(w_path/pi, 20*log10(abs(H_path)),'LineWidth',2,color="#7E2F8E");
hold off;
title('Amplitude Response');
xlabel('Normalized Frequency (*pi rad/sample)');
ylabel('Amplitude (dB)');
legend('Estimated FIR Channel', 'FIR System (Path)');

% Plot the phase response
subplot(2, 1, 2);
plot(w_est/pi, unwrap(angle(H_est)),'LineWidth',2,Color="#77AC30");
hold on;
plot(w_path/pi, unwrap(angle(H_path)),'LineWidth',2,color="#7E2F8E");
hold off;
title('Phase Response');
xlabel('Normalized Frequency (*pi rad/sample)');
ylabel('Phase (rad)');
legend('Estimated FIR Channel', 'FIR System (Path)');
